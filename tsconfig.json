{
    "compilerOptions": {
      /* Language and Environment */
      "target": "es6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
      "lib": ["es5", "es2015", "es2016", "dom", "esnext"] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
      "jsx": "react" /* Specify what JSX code is generated. */,
  
  
      /* Modules */
      "module": "es2015" /* Specify what module code is generated. */,
      "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
      "types": ["jest", "node", "@testing-library/jest-dom"] /* Specify type package names to be included without being referenced in a source file. */,
  
  
      /* Emit */
      "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
      "sourceMap": false /* Create source map files for emitted JavaScript files. */,
      // "inlineSources": true,
      // "sourceRoot": "ts/",
      "outDir": "dist/esm" /* Specify an output folder for all emitted files. */,
      "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
      "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
      "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
      // "inlineSourceMap": true,
      /* Type Checking */
      "strict": false /* Enable all strict type-checking options. */,
      "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
      "noUnusedLocals": false /* Enable error reporting when a local variables aren't read. */,
      "skipLibCheck": true /* Skip type checking all .d.ts files. */
    }
  }
  